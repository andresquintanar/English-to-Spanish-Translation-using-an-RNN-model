# -*- coding: utf-8 -*-
"""quintanar_andres_FinalProject_p2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11VHLF-bv0v3yuLDM1ehFGlCohH8bHKOm
"""

# Andres Quintanar
# Translating English to Spanish

import collections
import numpy as np
from keras.preprocessing.text import Tokenizer
from keras.utils import pad_sequences
from keras.models import Sequential
from keras.layers import GRU, Dense, TimeDistributed, Dropout
import matplotlib.pyplot as plt
import os 
import pandas as pd

# 1.)
input_file = os.path.join('/english-spanish-dataset.csv')
with open(input_file, "r") as f:
  data = f.read().split("\n")

#2.)
number = []
english = []
spanish = []
for i in range(1,50002):
  orig = data[i]
  data_split = orig.split(',')
  number.append(data_split[0])
  english.append(data_split[1])
  spanish.append(data_split[2])

#3.)
def tokenize(x):
    """
    Tokenize x
    :param x: List of sentences/strings to be tokenized
    :return: Tuple of (tokenized x data, tokenizer used to tokenize x)
    """
    tokenizer = Tokenizer()
    tokenizer.fit_on_texts(x)
    return tokenizer.texts_to_sequences(x), tokenizer

# text_tokenized_english, text_tokenizer_english = tokenize(english)
# text_tokenized_spanish, text_tokenizer_spanish = tokenize(spanish)
# for sample_i, (sent, token_sent) in enumerate(zip(spanish, text_tokenized_spanish)):
#     print('Sequence {} in x'.format(sample_i + 1))
#     print('  Input:  {}'.format(sent))
#     print('  Output: {}'.format(token_sent))


#4.)

def pad(x, length=None):
    """
    Pad x
    :param x: List of sequences.
    :param length: Length to pad the sequence to.  If None, use length of longest sequence in x.
    :return: Padded numpy array of sequences
    """
    return pad_sequences(x, maxlen=length, padding='post')

# english_pad = pad(text_tokenized_english, length=None)
# spanish_pad = pad(text_tokenized_spanish, length=None)

# for sample_i, (token_sent, pad_sent) in enumerate(zip(text_tokenized_english, english_pad)):
#     print('Sequence {} in x'.format(sample_i + 1))
#     print('  Input:  {}'.format(np.array(token_sent)))
#     print('  Output: {}'.format(pad_sent))

def preprocess(x, y):
    """
    Preprocess x and y
    :param x: Feature List of sentences
    :param y: Label List of sentences
    :return: Tuple of (Preprocessed x, Preprocessed y, x tokenizer, y tokenizer)
    """
    preprocess_x, x_tk = tokenize(x)
    preprocess_y, y_tk = tokenize(y)

    preprocess_x = pad(preprocess_x)
    preprocess_y = pad(preprocess_y)

    # Keras's sparse_categorical_crossentropy function requires the labels to be in 3 dimensions
    preprocess_y = preprocess_y.reshape(*preprocess_y.shape, 1)

    return preprocess_x, preprocess_y, x_tk, y_tk

preproc_english_sentences, preproc_spanish_sentences, english_tokenizer, \
spanish_tokenizer = preprocess(english, spanish)

# print(preproc_english_sentences.shape)
# print(preproc_french_sentences.shape)
max_english_sequence_length = preproc_english_sentences.shape[1]
max_spanish_sequence_length = preproc_spanish_sentences.shape[1]
english_vocab_size = len(english_tokenizer.word_index)
spanish_vocab_size = len(spanish_tokenizer.word_index)

print("Max English sentence length:", max_english_sequence_length)
print("Max French sentence length:", max_spanish_sequence_length)
print("English vocabulary size:", english_vocab_size)
print("French vocabulary size:", spanish_vocab_size)

def logits_to_text(logits, tokenizer):
    """
    Turn logits from a neural network into text using the tokenizer
    :param logits: Logits from a neural network
    :param tokenizer: Keras Tokenizer fit on the labels
    :return: String that represents the text of the logits
    """
    index_to_words = {id: word for word, id in tokenizer.word_index.items()}
    index_to_words[0] = "<PAD>"

    return ' '.join([index_to_words[prediction] for prediction in np.argmax(logits, 1)])


#5 and 6.)
def simple_model(input_shape, output_sequence_length, english_vocab_size, french_vocab_size):
    """
    Build and train a basic RNN on x and y
    :param input_shape: Tuple of input shape
    :param output_sequence_length: Length of output sequence
    :param english_vocab_size: Number of unique English words in the dataset
    :param french_vocab_size: Number of unique French words in the dataset
    :return: Keras model built, but not trained
    """
    # TODO: Build the layers
    model = Sequential()
    model.add(GRU(128, input_shape=input_shape[1:], return_sequences=True))
    model.add(Dropout(0.5))
    model.add(GRU(128, return_sequences=True))
    model.add(Dropout(0.5))
    model.add(TimeDistributed(Dense(256, activation='relu')))
    model.add(Dropout(0.5))
    model.add(TimeDistributed(Dense(french_vocab_size + 1, activation='softmax')))

    model.compile(loss="sparse_categorical_crossentropy",
                  optimizer="adam",
                  metrics=['accuracy'])
    return model

# Reshaping the input to work with a basic RNN
tmp_x = pad(preproc_english_sentences, max_spanish_sequence_length)

tmp_x = tmp_x.reshape((-1, preproc_spanish_sentences.shape[-2], 1))


# Train the neural network
model = simple_model(
    tmp_x.shape,
    max_spanish_sequence_length,
    english_vocab_size,
    spanish_vocab_size)
model.summary()

#7.)
history = model.fit(tmp_x, preproc_spanish_sentences, batch_size=300,
                     epochs=5, validation_split=0.2)


#8.)

# Loss curve
plt.figure(figsize=[6,4])
plt.plot(history.history['loss'], 'black', linewidth=2.0)
plt.plot(history.history['val_loss'], 'green', linewidth=2.0)
plt.legend(['Training Loss', 'Validation Loss'], fontsize=14)
plt.xlabel('Epochs', fontsize=10)
plt.ylabel('Loss', fontsize=10)
plt.title('Loss Curves', fontsize=12)
plt.show()

# Accuracy curve
plt.figure(figsize=[6,4])
plt.plot(history.history['accuracy'], 'black', linewidth=2.0)
plt.plot(history.history['val_accuracy'], 'blue', linewidth=2.0)
plt.legend(['Training Accuracy', 'Validation Accuracy'], fontsize=14)
plt.xlabel('Epochs', fontsize=10)
plt.ylabel('Accuracy', fontsize=10)
plt.title('Accuracy Curves', fontsize=12)
plt.show()

#9.)
# Predict user inputted sentence
user_sentence = input("Enter English sentence: ")
print("You entered", user_sentence)

user_sentence = [english_tokenizer.word_index[word] for word in user_sentence.split()]
user_sentence = pad_sequences([user_sentence],
                              maxlen=preproc_spanish_sentences.shape[-2], padding='post')
tmp_x = user_sentence.reshape((-1, preproc_spanish_sentences.shape[-2], 1))

print(tmp_x.shape)
prediction = model.predict(tmp_x)
print(prediction)
print("Translation is", logits_to_text(prediction[0], spanish_tokenizer))

from google.colab import drive
drive.mount('/content/drive')